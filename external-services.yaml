apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-headless
  namespace: cneura-core
spec:
  clusterIP: None  
  selector:
    app: rabbitmq
  ports:
    - port: 5672
      targetPort: 5672
      name: amqp
    - port: 15672
      targetPort: 15672
      name: management
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: cneura-core
  labels:
    app: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
    - port: 5672
      targetPort: 5672
      name: amqp
    - port: 15672
      targetPort: 15672
      name: management

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: cneura-core
spec:
  serviceName: rabbitmq
  replicas: 3
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      serviceAccountName: vault-loader-sa
      volumes:
        - name: secret-volume
          emptyDir: {}
      initContainers:
        - name: secretvault-loader
          image: shehandezen/cneura-vault-agent:latest
          env:
            - name: SECRET_IDS
              value: "cneura-core:rabbitmq-username=RABBITMQ_DEFAULT_USER,cneura-core:rabbitmq-password=RABBITMQ_DEFAULT_PASS,cneura-core:rabbitmq-cookie=RABBITMQ_ERLANG_COOKIE"
            - name: MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-master-key
                  key: master.key
            - name: OUTPUT_PATH
              value: "/secrets/.env"
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
      containers:
        - name: rabbitmq
          image: rabbitmq:3.13-management
          ports:
            - containerPort: 5672   
            - containerPort: 15672  
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
          env:
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: CLUSTER_WITH
              value: "rabbitmq-0.rabbitmq.cneura-core.svc.cluster.local"
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: "-rabbit cluster_formation.peer_discovery_backend=rabbit_peer_discovery_k8s -rabbit cluster_formation.k8s.host=rabbitmq-headless"
            - name: K8S_SERVICE_NAME
              value: "rabbitmq-headles"
            - name: RABBITMQ_CLUSTER_PARTITION_HANDLING
              value: "autoheal"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          # command: ["/bin/sh","-c"]
          # args:
          #   - |
          #     if [ -f /secrets/.env ]; then
          #       set -a; . /secrets/.env; set +a
          #     fi
          #     if [ "$(hostname)" != "rabbitmq-0" ]; then
          #       echo "⏳ Waiting for rabbitmq-0 to be ready..."
          #       until rabbitmq-diagnostics -n rabbit@rabbitmq-0.rabbitmq.cneura-core.svc.cluster.local status; do
          #         echo "Waiting 5s..."
          #         sleep 5
          #       done
              
          #       echo "Starting follower node..."
          #       rabbitmq-server -detached

          #       until rabbitmq-diagnostics status; do
          #         echo "Waiting for own node to be ready..."
          #         sleep 5
          #       done

          #       rabbitmqctl stop_app
          #       rabbitmqctl join_cluster rabbit@rabbitmq-0.rabbitmq.cneura-core.svc.cluster.local
          #       rabbitmqctl start_app

          #       tail -f /dev/null
          #     else
          #       exec docker-entrypoint.sh rabbitmq-server
          #     fi

          livenessProbe:
            tcpSocket:
              port: 5672
            initialDelaySeconds: 180
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: 5672
            initialDelaySeconds: 180
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi


---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-headless
  namespace: cneura-core
  labels:
    app: mongodb
spec:
  clusterIP: None
  selector:
    app: mongodb
  ports:
    - port: 27017
      name: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: cneura-core
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
      name: mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: cneura-core
  labels:
    app: mongodb
spec:
  serviceName: mongodb-headless
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      serviceAccountName: vault-loader-sa
      volumes:
        - name: secret-volume
          emptyDir: {}
      initContainers:
        - name: secretvault-loader
          image: shehandezen/cneura-vault-agent:latest
          env:
            - name: SECRET_IDS
              value: "cneura-core:mongodb-username=MONGO_INITDB_ROOT_USERNAME,cneura-core:mongodb-password=MONGO_INITDB_ROOT_PASSWORD,cneura-core:auth-db=MONGO_INITDB_DATABASE"
            - name: MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-master-key
                  key: master.key
            - name: OUTPUT_PATH
              value: "/secrets/.env"
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
      containers:
        - name: mongodb
          image: mongo:6.0
          command: ["mongod"]
          args: ["--replSet", "rs0", "--bind_ip_all"]
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
            - name: mongo-data
              mountPath: /data/db
          readinessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 180
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 180
            periodSeconds: 10
  volumeClaimTemplates:
    - metadata:
        name: mongo-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-replica-init
  namespace: cneura-core
spec:
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: vault-loader-sa
      volumes:
        - name: secret-volume
          emptyDir: {}
      initContainers:
        - name: secretvault-loader
          image: shehandezen/cneura-vault-agent:latest
          env:
            - name: SECRET_IDS
              value: "cneura-core:mongodb-username=MONGO_INITDB_ROOT_USERNAME,cneura-core:mongodb-password=MONGO_INITDB_ROOT_PASSWORD,cneura-core:auth-db=MONGO_INITDB_DATABASE"
            - name: MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-master-key
                  key: master.key
            - name: OUTPUT_PATH
              value: "/secrets/.env"
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
      containers:
        - name: init-replica-set
          image: mongo:6.0
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
          env:
            - name: REPLICAS
              value: "3"
            - name: MONGODB_NAME
              value: "mongodb"
          command:
            - bash
            - -c
            - |
              if [ -f /secrets/.env ]; then
                set -a; . /secrets/.env; set +a
              fi
      
              MONGO_HOST="${MONGODB_NAME}-0.${MONGODB_NAME}-headless:27017"
      
              # Wait for first pod to be ready
              echo "Waiting for MongoDB primary pod to be reachable..."
              until mongosh --quiet --host "$MONGO_HOST" --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
                sleep 2
              done
      
              # Check if replica set is already initialized
              RS_STATUS=$(mongosh --quiet --host "$MONGO_HOST" --eval "rs.status()" 2>&1 || echo "not-initialized")
              if [[ "$RS_STATUS" != "not-initialized" ]] && ! echo "$RS_STATUS" | grep -q "not yet initialized"; then
                echo "Replica set already initialized. Skipping rs.initiate..."
              else
                echo "Initializing replica set..."
                MEMBERS=""
                for ((i=0; i<REPLICAS; i++)); do
                  HOST="${MONGODB_NAME}-$i.${MONGODB_NAME}-headless:27017"
                  if [ $i -eq 0 ]; then
                    MEMBERS="{ _id: $i, host: \"$HOST\" }"
                  else
                    MEMBERS="$MEMBERS, { _id: $i, host: \"$HOST\" }"
                  fi
                done
      
                mongosh --quiet --host "$MONGO_HOST" \
                  --eval "rs.initiate({ _id: 'rs0', members: [ $MEMBERS ] })"
      
                # Wait until PRIMARY is elected
                echo "Waiting for PRIMARY..."
                until mongosh --quiet --host "$MONGO_HOST" --eval "rs.isMaster().ismaster" | grep -q true; do
                  sleep 2
                done
              fi
      
              # Check if root user exists
              USER_EXISTS=$(mongosh --quiet --host "$MONGO_HOST" --eval "db.getSiblingDB('admin').getUser('$MONGO_INITDB_ROOT_USERNAME')" 2>/dev/null || echo "")
              if [[ -z "$USER_EXISTS" ]]; then
                echo "Creating root user..."
                mongosh --quiet --host "$MONGO_HOST" \
                  --eval "db.getSiblingDB('admin').createUser({
                            user: '$MONGO_INITDB_ROOT_USERNAME',
                            pwd: '$MONGO_INITDB_ROOT_PASSWORD',
                            roles: [ { role: 'root', db: 'admin' } ]
                          })"
                echo "Root user created."
              else
                echo "Root user already exists. Skipping..."
              fi
      
              echo "MongoDB replica set is ready."

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  namespace: cneura-core
  labels: 
    app: mongo-express 
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: mongo-express 
  template:
    metadata:
      labels: 
        app: mongo-express 
    spec:
      serviceAccountName: vault-loader-sa
      volumes:
        - name: secret-volume
          emptyDir: {}
      initContainers:
        - name: secretvault-loader
          image: shehandezen/cneura-vault-agent:latest
          env:
            - name: SECRET_IDS
              value: "cneura-core:mongodb-username=ME_CONFIG_MONGODB_ADMINUSERNAME,cneura-core:mongodb-password=ME_CONFIG_MONGODB_ADMINPASSWORD"
            - name: MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-master-key
                  key: master.key
            - name: OUTPUT_PATH
              value: "/secrets/.env"
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
      containers:
        - name: mongo-express
          image: mongo-express:latest
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
          env:
            - name: ME_CONFIG_BASICAUTH
              value: "false"
          command: ["/bin/sh","-c"]
          args:
            - |
              if [ -f /secrets/.env ]; then
                echo "🚀 Loading secrets from /secrets/.env"
                set -a; . /secrets/.env; set +a
              fi

              export ME_CONFIG_MONGODB_URL="mongodb://${ME_CONFIG_MONGODB_ADMINUSERNAME}:${ME_CONFIG_MONGODB_ADMINPASSWORD}@mongodb-0.mongodb-headless.cneura-core.svc.cluster.local:27017,mongodb-1.mongodb-headless.cneura-core.svc.cluster.local:27017,mongodb-2.mongodb-headless.cneura-core.svc.cluster.local:27017/?replicaSet=rs0&authSource=admin"

              echo "✅ Using replica set connection: $ME_CONFIG_MONGODB_URL"

              exec tini -- node app
          livenessProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express
  namespace: cneura-core
spec:
  selector: 
    app: mongo-express 
  ports:
    - port: 8081
      targetPort: 8081
      name: http
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: cneura-core
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: cneura-core
  labels: 
    app: postgres 
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: postgres 
  template:
    metadata:
      labels: 
        app: postgres 
    spec:
      serviceAccountName: vault-loader-sa
      volumes:
        - name: secret-volume
          emptyDir: {}
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
      initContainers:
        - name: secretvault-loader
          image: shehandezen/cneura-vault-agent:latest
          env:
            - name: SECRET_IDS
              value: "cneura-core:postgres-username=POSTGRES_USER,cneura-core:postgres-password=POSTGRES_PASSWORD,cneura-core:postgres-db=POSTGRES_DB"
            - name: MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-master-key
                  key: master.key
            - name: OUTPUT_PATH
              value: "/secrets/.env"
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
      containers:
        - name: postgres
          image: ankane/pgvector:latest
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
            - name: postgres-data
              mountPath: /var/lib/postgresql/data

          command: ["/bin/sh","-c"]
          args:
            - |
              if [ -f /secrets/.env ]; then
                echo "🚀 Loading secrets from /secrets/.env"
                set -a; . /secrets/.env; set +a
              fi
              exec /usr/local/bin/docker-entrypoint.sh postgres
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 60
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: cneura-core
spec:
  selector: 
    app: postgres 
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chromadb
  namespace: cneura-core
  labels: 
    app: chromadb 
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: chromadb 
  template:
    metadata:
      labels: 
        app: chromadb 
    spec:
      serviceAccountName: vault-loader-sa
      volumes:
        - name: secret-volume
          emptyDir: {}
      initContainers:
        - name: secretvault-loader
          image: shehandezen/cneura-vault-agent:latest
          env:
            - name: SECRET_IDS
              value: "cneura-core:postgres-username=POSTGRES_USER,cneura-core:postgres-password=POSTGRES_PASSWORD,cneura-core:postgres-db=POSTGRES_DATABASE"
            - name: MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: vault-master-key
                  key: master.key
            - name: OUTPUT_PATH
              value: "/secrets/.env"
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
      containers:
        - name: chromadb
          image: ghcr.io/chroma-core/chroma:latest
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: secret-volume
              mountPath: /secrets
          env:
            - name: IS_PERSISTENT
              value: "TRUE"
            - name: ANONYMIZED_TELEMETRY
              value: "FALSE"
            - name: ALLOW_RESET
              value: "TRUE"
            - name: CHROMA_SERVER_HOST
              value: "0.0.0.0"
            - name: CHROMA_SERVER_HTTP_PORT
              value: "8000"
            - name: CHROMA_DB_IMPL
              value: "postgres"
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_PORT
              value: "5432"
          command: ["/bin/sh","-c"]
          args:
            - |
              if [ -f /secrets/.env ]; then
                echo "🚀 Loading secrets from /secrets/.env"
                set -a; . /secrets/.env; set +a
              fi
              exec chroma run --host 0.0.0.0 --port 8000
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: chromadb
  namespace: cneura-core
spec:
  selector: 
    app: chromadb 
  ports:
    - port: 8000
      targetPort: 8000
      name: http
